#!/bin/bash -e

# Setup tasks run on the system as root via chroot

enable_multilib_repo() {
  /etc/pacman.conf
}

vim_as_vi() {
  [[ -e /usr/bin/vi ]] && rm /usr/bin/vi
  ln -s /usr/bin/vim /usr/bin/vi
}

install_bspwm() {
  if ! type "bspwm" > /dev/null; then
    mkdir -p $HOME/src
    git clone https://github.com/Javyre/bspwm $HOME/src/bspwm
    cd $HOME/src/bspwm
    make && make install
  fi
}

install_essential_packages() {
    join_by() { local IFS="$1"; shift; echo "$*"; }

    # image-magick # display <font.ttf>
    # gcc5 # takes AGES to compile, needed for compiling older ruby versions
    # steam-fonts
    packages=(
    yubico-pam # allows use of yubikey for authentication
    android-tools # for connecting to android phone filesystems
    dmenu # lightweight spotlight
    pavucontrol
    aws-cli
    docker
    docker-compose
    peek
    evince
    visualvm
    go
    ripgrep
    feh
    sxhkd
    rsync
    mercurial
    vim
    emacs
    net-tools
    wget
    jdk8-openjdk
    ttf-inconsolata
    ruby
    ghostscript # for pdf stitching
    dmidecode # memory profiling with: dmidecode --type memory
    git
    xorg
    xorg-xinit
    xterm
    cmake
    unzip
    firefox
    linux-headers
    compton
    alsa-utils
    openssh
    xclip
    the_silver_searcher
    postgresql
    mongodb
    tmux
    xdotool
    xorg-xmessage
    xf86-video-intel # if intel.. else nvidia
    gimp
    htop
    ponymix
    scrot # screenshot utility
    ttf-dejavu # default fonts to avoid square block display
    npm
    clisp
    sbcl
    chicken # scheme
    tk # for R development
    bluez
    bluez-utils
    jq
    )

    pacman -Sy
    pacman -Scc --noconfirm
    pacman --noconfirm --needed -S $(join_by ' ' "${packages[@]}")
}

install_pacaur_and_extra_packages() {
  if ! type "pacaur" > /dev/null; then
    /opt/pacaur_install.sh
  fi

  packages=(
  git-crypt
  git-lfs
  google-chrome
  ttf-inconsolata-g
  ttf-ms-fonts
  ripgrep
  )

  pacaur --noconfirm --needed -Scc $(join_by ' ' "${packages[@]}")
}

create_user() {
    useradd -m -G wheel,docker -s /bin/bash hades
}

grant_sudo_to_wheel_group() {
    echo "%wheel ALL=(ALL) ALL" | (EDITOR="tee -a" visudo)
}

start_user_setup() {
    sudo -u hades /opt/user_setup
}

install_mbr_bootloader() {
    pacman --noconfirm -S grub os-prober
    grub-install --recheck /dev/sda
    grub-mkconfig -o /boot/grub/grub.cfg
}

set_hostname() {
    echo 'archbox' > /etc/hostname
    sed -i 's/localhost$/archbox/' /etc/hosts
}

set_localtime_to_gmt() {
    [ -L /etc/localtime ] && unlink /etc/localtime
    ln -s /usr/share/zoneinfo/Europe/London /etc/localtime
    hwclock --systohc --utc
}

select_locale() {
    cat <<-EOF >> /etc/locale.gen
    en_US.UTF-8 UTF-8
    en_GB.UTF-8 UTF-8
EOF
    locale-gen
    echo 'LANG=en_GB.UTF-8' >> /etc/locale.conf
}

function install_ruby_tools {
  if [[ ! -e /usr/local/share/chruby/chruby.sh ]]; then
    wget -O /tmp/chruby-0.3.9.tar.gz https://github.com/postmodern/chruby/archive/v0.3.9.tar.gz
    tar -xzvf /tmp/chruby-0.3.9.tar.gz -C /tmp
    cd /tmp/chruby-0.3.9
    make install
    cd -
  fi

  if [[ ! -e /usr/local/bin/ruby-install ]]; then
    wget -O ruby-install-0.6.1.tar.gz https://github.com/postmodern/ruby-install/archive/v0.6.1.tar.gz
    tar -xzvf ruby-install-0.6.1.tar.gz
    cd ruby-install-0.6.1/
    make install
    cd -
  fi
}

function install_clojure_tools {
  if [[ ! -e /usr/local/bin/lein ]]; then
    wget -O /usr/local/bin/lein https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein
    chmod 755 /usr/local/bin/lein
  fi

  if [[ ! -e /usr/local/bin/boot ]]; then
    bash -c "cd /usr/local/bin && curl -fsSLo boot https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh && chmod 755 boot"
    BOOT_AS_ROOT='yes' boot
  fi
}

main() {
  install_essential_packages
  install_pacaur_and_extra_packages
  install_bspwm
  # if [[ $1 = 'firsttime' ]];then
  #   echo ' => firsttime parameter passed; continuing setup'
  #   # create_user
  #   # grant_sudo_to_wheel_group
  #   # install_ruby_tools
  #   # install_clojure_tools
  #   # vim_as_vi
  #   # start_user_setup
  #   # select_locale
  #   # set_localtime_to_gmt
  #   # set_hostname
  #   # if [ "$PARTITION_TABLE" == "efi" ]; then
  #   #   echo 'no bootloader provided for efi, manual step pls.'
  #   # else
  #   #   install_mbr_bootloader
  #   # fi
  # fi
}

main
